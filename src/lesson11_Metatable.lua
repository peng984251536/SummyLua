---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 98425.
--- DateTime: 2022/3/16 22:21
---

require("function")

deLog("元表")
deLog("元表概念")
-- 任何表变量都可以作为另一个表变量的元表
-- 任何表变量都可以有自己的元表（爸爸）
-- 当我们子表中进行一些特点操作时
-- 会执行元表中的内容

deLog("设置元表")
meta = {}
myTable = {}
-- 设置元表函数
-- 第一个参数 子表
-- 第二个参数 元表
setmetatable(myTable,meta)  --（子表，元表）



deLog("特定操作")
deLog("特定操作-_tostring")
meta2 = {
    -- 当子表要被当做字符串使用时，会默认调用这个元素中的tostring方法
    -- 当子表调用该方法时，会默认传入子表
    __tostring = function(t)
        return t.name
    end
}
myTable2 = {
    name = "子表：唐老师"
}
-- 设置元表函数
-- 第一个参数 子表
-- 第二个参数 元表
setmetatable(myTable2,meta2)  --（子表，元表）
print(myTable2) --当子表被当做字符串表达时，会默认调用这个元素中的tostring方法



deLog("特定操作-_call")
meta3 = {
    -- 当子表要被当做字符串使用时，会默认调用这个元素中的tostring方法
    -- 当子表调用该方法时，会默认传入子表
    __tostring = function(t)
        return t.name
    end,
    __call = function(t,str1,str2)
        print("唐老师,",str1," love ",str2) --传入的t是子表，然后会自动调用tostring方法打印信息,str才是引入的参数
    end
}
myTable3 = {
    name = "子表：唐老师"
}
-- 设置元表函数
-- 第一个参数 子表
-- 第二个参数 元表
setmetatable(myTable3,meta3)  --（子表，元表）
myTable3("小红","小明")  --直接调用时会把子表本身传入，在传入需要传入的方法



deLog("特定操作-_call")
meta4 = {
    -- 相当于运算符重载，当子表使用 + 时，会调用该方法
    __add = function(t1,t2)
        return t1.num + t2.num
    end,

    --sub : 减法
    --mul : 乘法
    --div : 除法
    --mod : 取余
    --pow : 开方

    --"=="
    __eq = function(t1,t2)
        return t1.num == t2.num
    end,

    --"<"
    __lt = function(t1,t2)
        return t1.num < t2.num
    end
}
myTable4 = {num = 8}
myTable5 = {num = 5}
setmetatable(myTable4,meta4)
setmetatable(myTable5,meta4)
print(myTable4 + myTable5)
print(myTable4 == myTable5)
print(myTable4 < myTable5)
print(myTable4 > myTable5)
--如果要用条件运算符来比较两个对象
--这两个对象的元表一定要一致，才能准确调用方法（他们都有相同的元表和相同的属性）

deLog("特定操作-_index 和 _newIndex")
meta6 = {
    name = "six",

}
myTable6 = {}
setmetatable(myTable6,meta6)

--当子表中找不到某一属性时，会寻找元表__index指向的索引的表，依次往上寻找属性
--__index用于存储一些子表需要使用的属性和方法
meta6.__index = meta6
print(myTable6.name)
--rawget() --在自己表里找

deLog("制定操作-_newindex")
meta7 = {}
meta7.__newindex = {
    --name="",
}
myTable7 = {
   --name = "myTable7"
}
setmetatable(myTable7,meta7)
myTable7.name = "newindex-index7"
print(meta7.__newindex.name)
print(myTable7.name)
--给newindex赋表时，如果要赋值一个不存在的索引，
--那么会把这个值赋予到newindex所指的表中

deLog("获取元表")
t = getmetatable(myTable7)
print(t.__newindex.name)
-- rawset() --该方法会忽略newindex的设置








































