---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 98425.
--- DateTime: 2022/3/16 0:22
---

require("function")

deLog("协程常用方式")
fun = function()
    print("创建一个协程")
end
co1 = coroutine.create(fun) --create创建协程，返回的是thread对象
co2 = coroutine.wrap(fun)   --wrap创建协程

deLog("协程的运行")
coroutine.resume(co1)    --create创建协程需要api来调用
co2()                    --wrap创建协程返回的是函数


deLog("协程的挂起")
fun2 = function()
    local i = 0
    while true do
        i = i + 1
        print("协程次数:"..i)

        coroutine.yield(i)
    end
end
-- 函数执行的时候会在yield的时候暂停，只有当再次调用时才会暂停
-- 函数会先返回该协程是否在执行中的布尔值，还有yield带有的返回值
co1 = coroutine.create(fun2)
isOk,ret = coroutine.resume(co1)
print(isOk,ret)
isOk,ret = coroutine.resume(co1)
print(isOk,ret)
isOk,ret = coroutine.resume(co1)
print(isOk,ret)
isOk,ret = coroutine.resume(co1)
print(isOk,ret)

-- 函数会返回yield带有的返回值
co2 = coroutine.wrap(fun2)
ret = co2()
print(isOk)
isOk,ret = co2()
print(isOk)
isOk,ret = co2()
print(isOk)
isOk,ret = co2()
print(isOk)

deLog("协程状态")
-- status:打印协程对象状态
-- dead：协程已经结束了
-- suspended：协程在暂停中
-- running：协程在运行中

fun3 = function(num)
    print(num)
end

co3 = coroutine.wrap(fun3)
co3(77)

co4 = coroutine.create(fun3)
coroutine.resume(co4,88)